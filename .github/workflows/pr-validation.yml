name: PR Validation

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate plugin structure
        run: |
          echo "üîç Validating plugin structure..."

          # Check required files exist
          test -f .claude-plugin/marketplace.json || (echo "‚ùå marketplace.json missing" && exit 1)
          test -f README.md || (echo "‚ùå README.md missing" && exit 1)
          test -f LICENSE || (echo "‚ùå LICENSE missing" && exit 1)

          echo "‚úÖ Required files present"

      - name: Validate JSON files
        run: |
          echo "üîç Validating JSON files..."

          # Validate marketplace.json
          python3 -m json.tool .claude-plugin/marketplace.json > /dev/null || (echo "‚ùå Invalid JSON in marketplace.json" && exit 1)

          echo "‚úÖ JSON files valid"

      - name: Validate markdown command files
        run: |
          echo "üîç Validating command files..."

          # Check all command files have frontmatter
          for file in publisher-plugin/commands/*.md analytics-plugin/commands/*.md; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              head -1 "$file" | grep -q "^---$" || (echo "‚ùå Missing frontmatter in $file" && exit 1)
            fi
          done

          echo "‚úÖ All command files have valid frontmatter"

      - name: Check for exposed secrets
        run: |
          echo "üîç Checking for exposed secrets..."

          # Check for common secret patterns
          if grep -r "LINKEDIN_CLIENT_SECRET.*=" --include="*.md" --exclude-dir=.git publisher-plugin/ analytics-plugin/ | grep -v "your_secret\|CLIENT_SECRET="; then
            echo "‚ùå Possible exposed secret found"
            exit 1
          fi

          if test -f .env; then
            echo "‚ùå .env file should not be committed"
            exit 1
          fi

          echo "‚úÖ No exposed secrets found"

      - name: Validate bash syntax in commands
        run: |
          echo "üîç Validating bash syntax..."

          # Extract bash code blocks and check for common errors
          for file in publisher-plugin/commands/*.md; do
            echo "Checking bash syntax in $file..."

            # Check for unescaped quotes in sed commands
            if grep -E "sed 's/[^']*\$" "$file"; then
              echo "‚ö†Ô∏è  Potential sed syntax issue in $file"
            fi

            # Check for unclosed heredocs
            if grep -c "<<" "$file" != $(grep -c "^EOF$\|^COMMENTARYEOF$" "$file"); then
              echo "‚ö†Ô∏è  Potential unclosed heredoc in $file"
            fi
          done

          echo "‚úÖ Bash syntax checks passed"

      - name: Check command descriptions
        run: |
          echo "üîç Validating command descriptions..."

          # Verify all commands listed in marketplace.json exist
          python3 << 'PYEOF'
          import json
          import os

          with open('.claude-plugin/marketplace.json') as f:
              manifest = json.load(f)

          for plugin in manifest['plugins']:
              print(f"Checking {plugin['name']} plugin...")
              for cmd in plugin.get('commands', []):
                  cmd_path = os.path.join(plugin['source'], cmd)
                  if not os.path.exists(cmd_path):
                      print(f"‚ùå Command file missing: {cmd_path}")
                      exit(1)
                  print(f"  ‚úì {cmd}")

          print("‚úÖ All commands exist")
          PYEOF

      - name: Validate .gitignore
        run: |
          echo "üîç Checking .gitignore..."

          # Verify critical files are ignored
          grep -q "^\.env$" .gitignore || (echo "‚ùå .env not in .gitignore" && exit 1)
          grep -q "^\.claude/" .gitignore || (echo "‚ùå .claude/ not in .gitignore" && exit 1)

          echo "‚úÖ .gitignore properly configured"

      - name: Verify command content updates
        run: |
          echo "üîç Verifying command files have expected content..."

          # Check if x.md mentions 3 versions (if this PR adds that feature)
          if git diff origin/main...HEAD -- publisher-plugin/commands/x.md | grep -q "THREE"; then
            echo "  ‚úì x.md mentions THREE versions (feature detected)"

            # Verify it mentions all 3 types
            if grep -q "Thread" publisher-plugin/commands/x.md && \
               grep -q "Single Long" publisher-plugin/commands/x.md && \
               grep -q "Single Short" publisher-plugin/commands/x.md; then
              echo "  ‚úì All 3 versions documented in x.md"
            else
              echo "  ‚ö†Ô∏è  x.md updated but not all 3 versions mentioned"
            fi
          fi

          # Check if README was updated to reflect command changes
          if git diff origin/main...HEAD -- README.md | grep -q "version"; then
            echo "  ‚úì README updated with changes"
          fi

          echo "‚úÖ Content validation complete"

      - name: Summary
        run: |
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ All automated validation checks passed!"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "Validated:"
          echo "  ‚úì Plugin structure"
          echo "  ‚úì JSON files"
          echo "  ‚úì Markdown frontmatter"
          echo "  ‚úì No exposed secrets"
          echo "  ‚úì Bash syntax"
          echo "  ‚úì Command file existence"
          echo "  ‚úì .gitignore configuration"
          echo "  ‚úì Content updates verified"
          echo ""
          echo "‚ö†Ô∏è  MANUAL TESTING REQUIRED:"
          echo "  ‚Ä¢ Install plugin locally: /plugin marketplace add /path/to/repo"
          echo "  ‚Ä¢ Test each modified command"
          echo "  ‚Ä¢ Verify output matches documentation"
          echo "  ‚Ä¢ Test in a clean test project"
          echo ""
          echo "See PR description for testing checklist."
          echo ""
          echo "Ready for manual review! üöÄ"
